{"version":3,"sources":["../../es/index.mjs"],"names":["namespace","isNetworkError","error","CODE_EXCLUDE_LIST","response","Boolean","code","includes","SAFE_HTTP_METHODS","IDEMPOTENT_HTTP_METHODS","concat","isRetryableError","status","isSafeRequestError","config","indexOf","method","isIdempotentRequestError","isNetworkOrIdempotentRequestError","noDelay","exponentialDelay","retryNumber","delayFactor","delay","Math","pow","randomSum","random","DEFAULT_OPTIONS","retries","retryCondition","retryDelay","shouldResetTimeout","onRetry","getRequestOptions","defaultOptions","getCurrentState","currentState","retryCount","fixConfig","axios","defaults","agent","httpAgent","httpsAgent","shouldRetry","shouldRetryOrPromise","shouldRetryPromiseResult","axiosRetry","requestInterceptorId","interceptors","request","use","lastRequestTime","Date","now","responseInterceptorId","Promise","reject","timeout","lastRequestDuration","transformRequest","data","resolve","setTimeout"],"mappings":"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","sourcesContent":["import isRetryAllowed from 'is-retry-allowed';\n\nexport const namespace = 'axios-retry';\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkError(error) {\n  const CODE_EXCLUDE_LIST = ['ERR_CANCELED', 'ECONNABORTED'];\n\n  return (\n    !error.response &&\n    Boolean(error.code) && // Prevents retrying cancelled requests\n    !CODE_EXCLUDE_LIST.includes(error.code) && // Prevents retrying timed out & cancelled requests\n    isRetryAllowed(error) // Prevents retrying unsafe errors\n  );\n}\n\nconst SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isRetryableError(error) {\n  return (\n    error.code !== 'ECONNABORTED' &&\n    (!error.response || (error.response.status >= 500 && error.response.status <= 599))\n  );\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n\n/**\n * @return {number} - delay in milliseconds, always 0\n */\nfunction noDelay() {\n  return 0;\n}\n\n/**\n * Set delayFactor 1000 for an exponential delay to occur on the order\n * of seconds\n * @param  {number} [retryNumber=0]\n * @param  {Error}  error - unused; for existing API of retryDelay callback\n * @param  {number} [delayFactor=100] milliseconds\n * @return {number} - delay in milliseconds\n */\nexport function exponentialDelay(retryNumber = 0, error, delayFactor = 100) {\n  const delay = Math.pow(2, retryNumber) * delayFactor;\n  const randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n  return delay + randomSum;\n}\n\n/** @type {IAxiosRetryConfig} */\nexport const DEFAULT_OPTIONS = {\n  retries: 3,\n  retryCondition: isNetworkOrIdempotentRequestError,\n  retryDelay: noDelay,\n  shouldResetTimeout: false,\n  onRetry: () => {}\n};\n\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {IAxiosRetryConfig} defaultOptions\n * @return {IAxiosRetryConfigExtended}\n */\nfunction getRequestOptions(config, defaultOptions) {\n  return { ...DEFAULT_OPTIONS, ...defaultOptions, ...config[namespace] };\n}\n\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @param  {IAxiosRetryConfig} defaultOptions\n * @return {IAxiosRetryConfigExtended}\n */\nfunction getCurrentState(config, defaultOptions) {\n  const currentState = getRequestOptions(config, defaultOptions);\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n\n/**\n * Checks retryCondition if request can be retried. Handles it's returning value or Promise.\n * @param  {IAxiosRetryConfigExtended} currentState\n * @param  {Error} error\n * @return {Promise<boolean>}\n */\nasync function shouldRetry(currentState, error) {\n  const { retries, retryCondition } = currentState;\n  const shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error);\n\n  // This could be a promise\n  if (typeof shouldRetryOrPromise === 'object') {\n    try {\n      const shouldRetryPromiseResult = await shouldRetryOrPromise;\n      // keep return true unless shouldRetryPromiseResult return false for compatibility\n      return shouldRetryPromiseResult !== false;\n    } catch (_err) {\n      return false;\n    }\n  }\n  return shouldRetryOrPromise;\n}\n\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Exponential back-off retry delay between requests\n * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});\n *\n * // Custom retry delay\n * axiosRetry(axios, { retryDelay : (retryCount) => {\n *   return retryCount * 1000;\n * }});\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {boolean} [defaultOptions.shouldResetTimeout=false]\n *        Defines if the timeout should be reset between retries\n * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n * @param {Function} [defaultOptions.retryDelay=noDelay]\n *        A function to determine the delay between retry requests\n * @param {Function} [defaultOptions.onRetry=()=>{}]\n *        A function to get notified when a retry occurs\n * @return {{ requestInterceptorId: number, responseInterceptorId: number }}\n *        The ids of the interceptors added to the request and to the response (so they can be ejected at a later time)\n */\nexport default function axiosRetry(axios, defaultOptions) {\n  const requestInterceptorId = axios.interceptors.request.use((config) => {\n    const currentState = getCurrentState(config, defaultOptions);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n\n  const responseInterceptorId = axios.interceptors.response.use(null, async (error) => {\n    const { config } = error;\n\n    // If we have no information to retry the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    const currentState = getCurrentState(config, defaultOptions);\n\n    if (await shouldRetry(currentState, error)) {\n      currentState.retryCount += 1;\n      const { retryDelay, shouldResetTimeout, onRetry } = currentState;\n      const delay = retryDelay(currentState.retryCount, error);\n\n      // Axios fails merging this configuration to the default configuration because it has an issue\n      // with circular structures: https://github.com/mzabriskie/axios/issues/370\n      fixConfig(axios, config);\n\n      if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {\n        const lastRequestDuration = Date.now() - currentState.lastRequestTime;\n        const timeout = config.timeout - lastRequestDuration - delay;\n        if (timeout <= 0) {\n          return Promise.reject(error);\n        }\n        config.timeout = timeout;\n      }\n\n      config.transformRequest = [(data) => data];\n\n      await onRetry(currentState.retryCount, error, config);\n\n      return new Promise((resolve) => setTimeout(() => resolve(axios(config)), delay));\n    }\n\n    return Promise.reject(error);\n  });\n\n  return { requestInterceptorId, responseInterceptorId };\n}\n\n// Compatibility with CommonJS\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.isRetryableError = isRetryableError;\n"],"file":"index.js"}